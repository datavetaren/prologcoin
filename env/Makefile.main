OBJ_EXT := .o
EXE_EXT :=
LIB_EXT := .a
LINK := g++
CC := g++
CCFLAGS := -c -g -Werror -Wall -std=c++11 -pthread
ifeq ($(NODEBUG),1)
    CCFLAGS := -c -O3 -Werror -Wall -std=c++11 -pthread
endif
CCFLAGS += $(CC_EXTRA)
CCINC := -I
CCOUT := -o
LINKOUT := -o
LINKFLAGS := -g -pthread -L/usr/local/lib
CP := cp -f
AR := ar 
ARFLAGS :=
AROUT := -cr
DBG :=
UNAME := $(shell uname -s)
ifeq ($(UNAME),Linux)
   DBG := gdb -batch -return-child-result -ex run --args timeout 600s
endif

GCCLIBPATH := $(shell g++ -Xlinker -v  2>&1 |sed -n 's/^[[:space:]]*\(\/.*\)/\1/p')
GCCLIBDIRS := $(strip $(foreach d,$(GCCLIBPATH),$(filter -L%, $(d))))
GCCLIBDIRS := $(foreach d, $(GCCLIBDIRS), $(subst -L,,$(d)))
BOOSTDIR := $(dir $(firstword $(sort $(foreach d, $(GCCLIBDIRS), $(wildcard $(d)/libboost_filesystem.a)))))
ifeq ($(BOOSTDIR),)
    BOOSTDIR := $(dir $(firstword $(sort $(foreach d, $(GCCLIBPATH), $(wildcard $(d)/libboost_filesystem.a)))))
endif

HAS_BOOST_THREAD_MT := $(strip $(foreach d, $(GCCLIBPATH), $(wildcard $(d)/*boost_thread-mt*)))
BOOST_THREAD_LIB := $(if $(HAS_BOOST_THREAD_MT),boost_thread-mt,boost_thread)
EXT := $(subst boost_thread, $(BOOST_THREAD_LIB), $(EXT))

ifneq ($(INCDIR),)
   CCFLAGS := $(CCFLAGS) $(foreach d, $(INCDIR), $(CCINC) $(d))
endif

green="\033[0;32m"
yellow="\033[0;33m"
red="\033[0;31m"
white="\033[0;37m"
bold="\033[1m"
off="\033[0m"
nonl="\c"

ENV := $(ROOT)/env
SRC := $(ROOT)/src
OUT := $(ROOT)/out
BIN := $(ROOT)/bin

REQ_CHECK := $(shell test -e $(BIN)/req_check.txt && echo yes)

ifneq ($(REQ_CHECK), yes)
     $(info Checking requirements...)
     include $(ENV)/Makefile.req
     $(shell mkdir $(BIN))
     $(shell echo "Requirement checks passed" >$(BIN)/req_check.txt)
endif

.PHONY: clean run all test script test_valgrind count

#
# To fool GNU-Make that something has been done.
#
NOTHING := $(shell pwd >/dev/null)

define echon
	echo $1 $(nonl)
endef

define printerr
        if [ -s /tmp/err.log ]; \
        then \
            echo $(red) $(bold) && cat /tmp/err.log && echo $(off) $(white) && exit 1; \
        fi;
endef

define printfile
	(echo ; while read -r line; do if echo "$$line" |grep -E -i 'error|fail'; then echo $(red)$(bold)"$$line"$(off)$(white); else echo "$$line"; fi; done <$1; exit 1;)
endef

define checkval
	CHECK=`tail -n 1 $1 | grep '0 error'` && if [ -z $CHECK ]; then \
	    exit 1; \
	fi;
endef

CPP_FILES := $(wildcard $(SRC)/$(SUBDIR)/*.cpp)
OBJ_FILES := $(addprefix $(OUT)/, $(CPP_FILES:$(SRC)/%.cpp=%$(OBJ_EXT)))
OBJ_FILES0 := $(filter-out $(OUT)/main/main$(OBJ_EXT), $(OBJ_FILES))
TEST_CPP_FILES := $(wildcard $(SRC)/$(SUBDIR)/test/*.cpp)
TEST_OBJ_FILES := $(addprefix $(OUT)/$(SUBDIR)/test/, $(TEST_CPP_FILES:$(SRC)/$(SUBDIR)/test/%.cpp=%$(OBJ_EXT)))
TEST_EXE_FILES := $(addprefix $(BIN)/test/$(SUBDIR)/, $(TEST_CPP_FILES:$(SRC)/$(SUBDIR)/test/%.cpp=%$(EXE_EXT)))
TEST_OK_FILES := $(addprefix $(BIN)/test/$(SUBDIR)/, $(TEST_CPP_FILES:$(SRC)/$(SUBDIR)/test/%.cpp=%$(EXE_EXT).ok))
TEST_OK_VALGRIND_FILES := $(addprefix $(BIN)/test/$(SUBDIR)/, $(TEST_CPP_FILES:$(SRC)/$(SUBDIR)/test/%.cpp=%$(EXE_EXT).val.ok))
TEST_LOG_FILES := $(addprefix $(BIN)/test/$(SUBDIR)/, $(TEST_CPP_FILES:$(SRC)/$(SUBDIR)/test/%.cpp=%$(EXE_EXT).log))
SCRIPT_CPP_FILES := $(wildcard $(SRC)/$(SUBDIR)/script/*.cpp)
SCRIPT_OBJ_FILES := $(addprefix $(OUT)/$(SUBDIR)/script/, $(SCRIPT_CPP_FILES:$(SRC)/$(SUBDIR)/script/%.cpp=%$(OBJ_EXT)))
SCRIPT_EXE_FILES := $(addprefix $(BIN)/script/$(SUBDIR)/, $(SCRIPT_CPP_FILES:$(SRC)/$(SUBDIR)/script/%.cpp=%$(EXE_EXT)))
SCRIPT_OK_FILES := $(addprefix $(BIN)/script/$(SUBDIR)/, $(SCRIPT_CPP_FILES:$(SRC)/$(SUBDIR)/script/%.cpp=%$(EXE_EXT).ok))

LINK_DEP_FILES := $(addsuffix $(LIB_EXT), $(addprefix $(BIN)/lib,$(DEPENDS)))
LINK_DEP_FILES := $(LINK_DEP_FILES) $(addsuffix .a, $(addprefix $(BOOSTDIR)/lib, $(EXT)))

ifneq ($(LIB),)
GOAL := $(BIN)/lib$(LIB)$(LIB_EXT)
endif
ifneq ($(EXE),)
GOAL := $(BIN)/$(EXE)$(EXE_EXT)
endif

all : $(GOAL)

test : $(TEST_OK_FILES)

script : $(SCRIPT_OK_FILES)

test_valgrind : $(TEST_OK_VALGRIND_FILES)

.SECONDARY :

ifneq ($(EXE),)
$(GOAL) : $(BIN) $(OUT) $(OUT)/$(SUBDIR) $(OBJ_FILES)
	@mkdir -p $(BIN)
	@mkdir -p $(BIN)/$(SUBDIR)
	@rm -f /tmp/err.log
	@(echo $(green) $(bold) $@ $(off) $(white))
#	@(echo $(LINK) $(LINKFLAGS) $(LINKOUT)$@ $(OBJ_FILES) $(LINK_DEP_FILES))
	@($(LINK) $(LINKFLAGS) $(LINKOUT)$@ $(OBJ_FILES) $(LINK_DEP_FILES) 2>/tmp/err.log 1>&2) || $(printerr)
	@rm -f /tmp/err.log
endif

$(BIN)/%$(LIB_EXT) : $(BIN)/test/$(SUBDIR) $(OUT)/$(SUBDIR)/test $(OBJ_FILES)
	@mkdir -p /tmp
	@(echo $(green) $(bold) $@ $(off) $(white))
	@$(AR) $(ARFLAGS) $(AROUT) $@ $(OBJ_FILES)

$(BIN)/test/$(SUBDIR)/%$(EXE_EXT) : $(OUT)/$(SUBDIR)/test/%$(OBJ_EXT) $(OBJ_FILES0)
	@mkdir -p $(BIN)
	@mkdir -p $(BIN)/test/$(SUBDIR)
	@rm -f  /tmp/err.log
	@($(LINK) $(LINKFLAGS) $(LINKOUT)$@ $< $(OBJ_FILES0) $(LINK_DEP_FILES) 2>/tmp/err.log 1>&2) || $(printerr)
	@rm -f /tmp/err.log

$(BIN)/script/$(SUBDIR)/%$(EXE_EXT) : $(OUT)/$(SUBDIR)/script/%$(OBJ_EXT)
	@mkdir -p $(BIN)
	@mkdir -p $(BIN)/script/$(SUBDIR)
	@rm -f  /tmp/err.log
	@($(LINK) $(LINKFLAGS) $(LINKOUT)$@ $< $(LINK_DEP_FILES) 2>/tmp/err.log 1>&2) || $(printerr)
	@rm -f /tmp/err.log

$(BIN)/test/$(SUBDIR)/%$(EXE_EXT).ok : $(BIN)/test/$(SUBDIR)/%$(EXE_EXT)
	@$(call echon, $(yellow) $(bold) $<$(off)$(white)) 
	@($(DBG) $< $(ARGS) >$<.log 2>&1) || ($(CP) $<.log /tmp/err.log; exit 1) || ($(call printfile, /tmp/err.log))
	@touch $@
	@(echo $(green)$(bold) [OK]$(off)$(white))

$(BIN)/script/$(SUBDIR)/%$(EXE_EXT).ok : $(BIN)/script/$(SUBDIR)/%$(EXE_EXT)
	@$(call echon, $(yellow) $(bold) $<$(off)$(white)) 
	@( $< $(SCRIPTARGS) >$<.log 2>&1) || ($(CP) $<.log /tmp/err.log; exit 1) || ($(call printfile, /tmp/err.log))
	@touch $@
	@(echo $(green)$(bold) [OK]$(off)$(white))

$(BIN)/test/$(SUBDIR)/%$(EXE_EXT).val.ok : $(BIN)/test/$(SUBDIR)/%$(EXE_EXT)
	@$(call echon, $(yellow) $(bold) $<$(off)$(white)) 
	@( valgrind --tool=memcheck --track-origins=yes --leak-check=full --show-leak-kinds=definite,indirect --errors-for-leak-kinds=definite,indirect $< >$<.val.log 2>&1) || ($(CP) $<.log /tmp/err.log; exit 1) || $(call printfile, /tmp/err.log)
	@( ($(call checkval, $<.val.log)) || ($(call printfile, $<.val.log)))
	@touch $@
	@(echo $(green)$(bold) [OK]$(off)$(white))

$(OUT)/$(SUBDIR)/test/%$(OBJ_EXT) : $(SRC)/$(SUBDIR)/test/%.cpp
	@mkdir -p $(OUT)/$(SUBDIR)/test
	@$(call echon, $(green) $(bold)  $(notdir $<) $(off) $(white)) 
	@mkdir -p /tmp
	@rm -f /tmp/err.log
	@mkdir -p $(OUT)/test
	@($(CC) $(CCFLAGS) $(CCINC) $(SRC) $< $(CCOUT) $@ 2>/tmp/err.log 1>&2) || $(printerr)

$(OUT)/$(SUBDIR)/script/%$(OBJ_EXT) : $(SRC)/$(SUBDIR)/script/%.cpp
	@$(call echon, $(green) $(bold)  $(notdir $<) $(off) $(white)) 
	@mkdir -p /tmp
	@rm -f /tmp/err.log
	@mkdir -p $(OUT)/$(SUBDIR)/script
	@($(CC) $(CCFLAGS) $(CCINC) $(SRC) $< $(CCOUT) $@ 2>/tmp/err.log 1>&2) || $(printerr)

$(OUT)/$(SUBDIR)/%$(OBJ_EXT) : $(SRC)/$(SUBDIR)/%.cpp
	@(echo $(green) $(bold) $(notdir $<) $(off) $(white))
	@mkdir -p /tmp/
	@rm -f /tmp/err.log
	@($(CC) $(CCFLAGS) $< $(CCOUT) $@ 2>/tmp/err.log 1>&2) || $(printerr)

$(OUT) $(OUT)/$(SUBDIR) $(OUT)/$(SUBDIR)/test $(OUT)/$(SUBDIR)/script:
	@mkdir -p $@

$(BIN) $(BIN)/test/$(SUBDIR) $(BIN)/script/$(SUBDIR):
	@mkdir -p $@

clean :
	@touch /tmp/err.log
	@rm -f /tmp/err.log
	@rm -f $(OBJ_FILES) $(GOAL) $(TEST_OBJ_FILES) $(TEST_EXE_FILES) $(TEST_OK_FILES) $(TEST_LOG_FILES) $(SCRIPT_OBJ_FILES) $(SCRIPT_EXE_FILES) $(SCRIPT_OK_FILES)
#
#run : $(GOAL)
#	$(GOAL)

count :
	@find $(SRC) \( -name "*.hpp" -o -name "*.cpp" -o -name "*.pl" \) -a ! -name "*_gen.hpp" |xargs wc -l
